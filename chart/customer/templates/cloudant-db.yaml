apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-{{ .Values.service.cloudantservicename }}
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name }}
    implementation: microprofile
spec:
  type: {{ .Values.cloudant.type }}
  ports:
    - port: {{ .Values.cloudant.port }}
      nodePort: {{ .Values.cloudant.nodeport }}
  selector:
    micro: customer
    service: cloudant-db
    release: {{ .Release.Name }}
    implementation: microprofile
---
{{- if .Values.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cloudant-pv-claim
  labels:
    app: bluecompute
    tier: backend
    release: {{ .Release.Name }}
    implementation: microprofile
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
{{- if .Values.persistence.storageClass }}
{{- if (eq "-" .Values.persistence.storageClass) }}
  storageClassName: ""
{{- else }}
  storageClassName: "{{ .Values.persistence.storageClass }}"
{{- end }}
{{- end }}
{{- end }}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-cloudant"
  labels:
    app: bluecompute
    micro: customer
    service: cloudant-db
    tier: backend
    release: {{ .Release.Name }}
    implementation: microprofile
    chart: '{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}'
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: bluecompute
        micro: customer
        service: cloudant-db
        tier: backend
        release: {{ .Release.Name }}
        implementation: microprofile

    spec:
      containers:

      # Container for Cloudant
      - name: cloudant
        image: ibmcom/cloudant-developer
        imagePullPolicy: Always
        ports:
            - containerPort: {{ .Values.cloudant.port }}
        env:
          - name: CLOUDANT_ROOT_PASSWORD
            value: {{ .Values.cloudant.password }}
        #volumeMounts:
        #- name: cloudant-pv
          #mountPath: /var/lib/cloudant
      #volumes:
      #- name: cloudant-pv
        #persistentVolumeClaim:
          #claimName: cloudant-pv-claim
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-populate"
spec:
  template:
    spec:
      containers:
      - name: populate-db
        image: "{{ .Values.cloudant.image }}"
        imagePullPolicy: IfNotPresent
        # command: Taken care of by Dockerfile entrypoint, python3 tmp/populate.py
        args: ["{{ .Release.Name }}-{{ .Values.service.cloudantservicename }}", "{{ .Values.cloudant.port }}"]
      restartPolicy: Never
